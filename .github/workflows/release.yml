name: Release
on:
  release:
    types: [created]

jobs:
  build:
    name: Build Binary
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        arch: [amd64, "386"]
        include:
          - os: windows-latest
            goos: windows
            bin: "check-password-strength.exe"
            releaseos: windows
          - os: macos-latest
            goos: darwin
            bin: "check-password-strength"
            releaseos: osx
          - os: ubuntu-latest
            goos: linux
            bin: "check-password-strength"
            releaseos: linux
        exclude:
          - os: macos-latest
            arch: "386"
          - os: ubuntu-latest
            arch: "386"
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"
      - if: matrix.arch == '386'
        run: echo "RELEASE=check-password-strength-${{ github.event.release.tag_name}}-${{ matrix.releaseos}}-32bit" >> $GITHUB_ENV
      - if: matrix.arch == 'amd64'
        run: echo "RELEASE=check-password-strength-${{ github.event.release.tag_name}}-${{ matrix.releaseos}}-64bit" >> $GITHUB_ENV
      - if: matrix.os == 'windows-latest' && matrix.arch == '386'
        shell: powershell
        run: echo "RELEASE=check-password-strength-${{ github.event.release.tag_name}}-${{ matrix.releaseos}}-32bit.exe" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
      - if: matrix.os == 'windows-latest' && matrix.arch == 'amd64'
        shell: powershell
        run: echo "RELEASE=check-password-strength-${{ github.event.release.tag_name}}-${{ matrix.releaseos}}-64bit.exe" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
      - uses: actions/checkout@v4
      - name: Build ${{ matrix.goos }}/${{ matrix.arch }}
        run: go build -ldflags '-w -s' -o ${{ env.RELEASE }}
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.arch }}
      - name: Upload to artifacts
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.RELEASE }}
          name: ${{ env.RELEASE }}

  upload:
    name: Upload to the Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: download
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true
      - name: Upload Archives to Release
        env:
          UPLOAD_URL: ${{ github.event.release.upload_url }}
          API_HEADER: "Accept: application/vnd.github.v3+json"
          AUTH_HEADER: "Authorization: token ${{ secrets.GITHUB_TOKEN }}"
        run: |
          UPLOAD_URL=$(echo -n $UPLOAD_URL | sed s/\{.*//g)
          for FILE in artifacts/*
          do
            echo "Uploading ${FILE}";
            curl \
              -H "${API_HEADER}" \
              -H "${AUTH_HEADER}" \
              -H "Content-Type: $(file -b --mime-type ${FILE})" \
              --data-binary "@${FILE}" \
              "${UPLOAD_URL}?name=$(basename ${FILE})";
          done
      - name: Generate SHA256 Hashes
        env:
          API_HEADER: "Accept: application/vnd.github.v3+json"
          AUTH_HEADER: "Authorization: token ${{ secrets.GITHUB_TOKEN }}"
          RELEASE_URL: ${{ github.event.release.url }}
        run: |
          HASH_TABLE="| SHA256 Hash | Filename |"
          HASH_TABLE="${HASH_TABLE}\n|-----|-----|\n"
          for FILE in artifacts/*
          do
            FILENAME=$(basename ${FILE})
            HASH=$(sha256sum ${FILE} | cut -d ' ' -f 1)
            HASH_TABLE="${HASH_TABLE}|${HASH}|${FILENAME}|\n"
          done
          echo "${HASH_TABLE}"
          curl \
            -XPATCH \
            -H "${API_HEADER}" \
            -H "${AUTH_HEADER}" \
            -H "Content-Type: application/json" \
            -d "{\"body\": \"${HASH_TABLE}\"}" \
            "${RELEASE_URL}";

  docker:
    name: Push image to  DockerHub
    runs-on: ubuntu-latest
    needs: upload
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Build image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: camandel/check-password-strength:${{ github.event.release.tag_name}}, camandel/check-password-strength:latest
